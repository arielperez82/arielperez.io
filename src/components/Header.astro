---
const { url } = Astro
const links = [
  { href: '#', label: 'Home' },
  { href: '#expertise', label: 'Expertise' },
  { href: '#working-with-me', label: 'Work with me' },
  { href: '#featured-writing', label: 'Featured writing' }
]
function isActive(href: string) {
  if (href === '/') return url.pathname === '/'
  return url.hash === href
}
---

<header
  class="nav-container relative z-50 flex w-full items-center justify-between"
>
  <!-- Theme toggle -->
  <button
    id="theme-toggle"
    class="toggle bg-card focus:ring-primary flex h-10 w-10 items-center justify-center rounded-lg border transition-colors focus:ring-2 focus:outline-none"
    aria-label="Toggle dark mode"
    type="button"
  >
    <svg
      id="theme-icon"
      class="h-6 w-6"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
    </svg>
  </button>

  <!-- Desktop nav (hidden on mobile) -->
  <nav
    class="hidden flex-1 justify-center md:flex"
    aria-label="Main navigation"
  >
    <ul class="flex gap-8 text-xl font-semibold">
      {
        links.map((link) => (
          <li class="list-none">
            <a
              href={link.href}
              class={`block rounded ${
                isActive(link.href) ? 'text-primary' : 'text-secondary'
              }`}
            >
              {link.label}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>

  <!-- Hamburger button (mobile only) -->
  <button
    id="menu-toggle"
    class="toggle bg-card focus:ring-primary flex h-10 w-10 items-center justify-center rounded-lg focus:ring-2 md:hidden"
    aria-label="Toggle mobile menu"
  >
    <svg
      id="menu-icon"
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      viewBox="0 0 24 24"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>

  <!-- Mobile full-screen menu (hidden on desktop) -->
  <nav
    id="mobile-menu"
    class="mobile-menu fixed inset-0 z-40 hidden flex-col items-center justify-center md:hidden"
    aria-label="Mobile navigation"
  >
    <!-- Mobile full-screen menu close button -->
    <button
      id="menu-close"
      class="toggle bg-card focus:ring-primary absolute top-[2.5rem] right-[1.5rem] flex h-10 w-10 items-center justify-center rounded-lg focus:ring-2"
      aria-label="Close menu"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        viewBox="0 0 24 24"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <ul class="mt-[5rem] ml-[1.5rem] flex flex-col gap-6">
      {
        links.map((link) => (
          <li class="list-none">
            <a
              href={link.href}
              class={`block rounded text-xl font-bold ${
                isActive(link.href) ? 'text-primary' : 'text-secondary'
              }`}
            >
              {link.label}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<style>
  .toggle {
    flex-shrink: 0;
    cursor: pointer;
    border: 1px solid;
    border-color: var(--color-secondary);

    &:hover {
      color: var(--color-primary-dark);
      background-color: var(--color-secondary);
    }
  }

  body.dark .toggle {
    border-color: var(--color-secondary-dark);

    &:hover {
      color: var(--color-primary);
      background-color: var(--color-secondary-dark);
    }
  }

  .mobile-menu {
    background-color: var(--color-bg);
  }

  body.dark .mobile-menu {
    background-color: var(--color-bg-dark);
  }
</style>

<script>
  function setActiveLink() {
    const links = document.querySelectorAll('nav a')
    const hash = window.location.hash || '#'
    links.forEach((link) => {
      const href = link.getAttribute('href')
      if (href === hash) {
        link.classList.add('text-primary')
        link.classList.remove('text-secondary')
      } else {
        link.classList.remove('text-primary')
        link.classList.add('text-secondary')
      }
    })
  }
  window.addEventListener('hashchange', setActiveLink)
  window.addEventListener('DOMContentLoaded', setActiveLink)

  // Theme toggle logic
  function setThemeIcon(isDark: boolean) {
    const icon = document.getElementById('theme-icon')
    if (!icon) return
    icon.innerHTML = isDark
      ? `<path d="M21 12.79A9 9 0 1 1 11.21 3a7 7 0 0 0 9.79 9.79z"/>`
      : `<circle cx="12" cy="12" r="5"/><path d="M12 1v2m0 18v2m11-11h-2M3 12H1m16.95 7.07-1.41-1.41M6.34 6.34 4.93 4.93m12.02 0-1.41 1.41M6.34 17.66l-1.41 1.41"/>`
  }
  function setDarkMode(isDark: boolean) {
    const body = document.body
    if (isDark) {
      body.classList.add('dark')
      localStorage.setItem('theme', 'dark')
    } else {
      body.classList.remove('dark')
      localStorage.setItem('theme', 'light')
    }
    setThemeIcon(isDark)
  }
  function getSystemPrefersDark() {
    return (
      window.matchMedia &&
      window.matchMedia('(prefers-color-scheme: dark)').matches
    )
  }
  window.addEventListener('DOMContentLoaded', function () {
    // Init theme
    let theme = localStorage.getItem('theme')
    if (!theme) theme = getSystemPrefersDark() ? 'dark' : 'light'
    setDarkMode(theme === 'dark')
    // Toggle handler
    const toggle = document.getElementById('theme-toggle')
    if (toggle) {
      toggle.addEventListener('click', function () {
        const isDark = document.body.classList.contains('dark')
        setDarkMode(!isDark)
      })
    }
  })

  // Mobile menu toggle
  window.addEventListener('DOMContentLoaded', function () {
    const menuToggle = document.getElementById('menu-toggle')
    const mobileMenu = document.getElementById('mobile-menu')
    const menuClose = document.getElementById('menu-close')

    if (menuToggle && mobileMenu && menuClose) {
      menuToggle.addEventListener('click', () => {
        mobileMenu.classList.remove('hidden')
      })

      menuClose.addEventListener('click', () => {
        mobileMenu.classList.add('hidden')
      })
      // Close mobile menu when a nav link is clicked
      const navLinks = mobileMenu.querySelectorAll('a')
      navLinks.forEach((link) => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden')
        })
      })
    }
  })
</script>
